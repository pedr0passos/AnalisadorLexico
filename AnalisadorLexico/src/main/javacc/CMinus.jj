options {
    LOOKAHEAD = 2;
    UNICODE_INPUT = false; // Garante que apenas caracteres ASCII sejam aceitos
}

PARSER_BEGIN(SimpleParser)

package javacc;

import java.io.InputStream;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.ModelToken;

public class SimpleParser {

    private Stack<Map<String, String>> symbolTable = new Stack<>();
    // Variáveis globais para armazenar o tipo e nome da variável atualmente declarada
    public String currentDeclaredType = null;
    public String currentDeclaredVar = null;

    private boolean dentroDeLoop = false;

    public void analisar() throws ParseException {
        this.Start();
    }

    private static final Map<Integer, String> tokenNameMap = createTokenNameMap();

    private static Map<Integer, String> createTokenNameMap() {
        Map<Integer, String> map = new HashMap<>();
        Field[] fields = SimpleParserConstants.class.getDeclaredFields();
        for (Field field : fields) {
            if (field.getType() == int.class) {
                int value = 0;
                try {
                    value = field.getInt(null);
                } catch (IllegalArgumentException | IllegalAccessException ex) {
                    Logger.getLogger(SimpleParser.class.getName()).log(Level.SEVERE, null, ex);
                }
                map.put(value, field.getName());
            }
        }
        return map;
    }

    public String lookup(String name) {
        for (int i = symbolTable.size() - 1; i >= 0; i--) {
            if (symbolTable.get(i).containsKey(name)) {
                return symbolTable.get(i).get(name);
            }
        }
        return null;
    }

    public String lookupInCurrentScope(String name) {
        if (!symbolTable.isEmpty() && symbolTable.peek().containsKey(name)) {
            return symbolTable.peek().get(name);
        }
        return null;
    }

    public String lookupInGlobal(String name) {
        if (!symbolTable.isEmpty() && symbolTable.firstElement().containsKey(name)) {
            return symbolTable.firstElement().get(name);
        }
        return null;
    }

    public String computeExprType(Token token) throws ParseException {
        if (token.kind == SimpleParserConstants.NUMBER) {
            if (token.image.indexOf('.') >= 0) return "float";
            else return "int";
        } else if (token.kind == SimpleParserConstants.CHAR_LITERAL) {
            return "char";
        } else if (token.kind == SimpleParserConstants.IDENTIFIER) {
            String t = lookup(token.image);
            if (t == null) throw new ParseException("Erro semântico: variável ou função " + token.image + " não declarada.");
            return t;
        } else if (token.kind == SimpleParserConstants.LITERAL) {
            return "string";
        } else {
            throw new ParseException("Erro semântico: expressão não suportada para atribuição.");
        }
    }

    public ArrayList<ModelToken> getTokens(InputStream codigo) throws ParseException {
        var tokens = new ArrayList<ModelToken>();
        this.ReInit(codigo);
        while (true) {
            Token token = this.getNextToken();

            if (token.kind == SimpleParserConstants.EOF) break;

            String tokenNome = tokenNameMap.get(token.kind);
            if (tokenNome == null) {
                tokenNome = SimpleParserConstants.tokenImage[token.kind];
            } else {
                tokenNome = "<" + tokenNome + ">";
            }
            tokens.add(new ModelToken(tokenNome, token.image));
        }
        return tokens;
    }
}

PARSER_END(SimpleParser)

SKIP : {
    " " | "\t" | "\n" | "\r"
}

SKIP : {
    <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ( "\n" | "\r" | "\r\n" )>
}

SKIP : {
    <MULTI_LINE_COMMENT: "/*" ( ~["*"] )* ( "*" ( ~["/"] )* )* "/">
}

TOKEN : {
    < DEFINE: "#define" >
  | < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)+)? >
  | < #LETTER: ["a"-"z", "A"-"Z", "_"] >
  | < #DIGIT: ["0"-"9"] >
  | < ADD: "+" >
  | < SUB: "-" >
  | < MUL: "*" >
  | < DIV: "/" >
  | < MOD: "%" >
  | < LPAREN: "(" >
  | < RPAREN: ")" >
  | < SEMICOLON: ";" >
  | < AUTO: "auto" >
  | < STATIC: "static" >
  | < EXTERN: "extern" >
  | < CONST: "const" >
  | < VOID: "void" >
  | < CHAR: "char" >
  | < FLOAT: "float" >
  | < DOUBLE: "double" >
  | < SIGNED: "signed" >
  | < UNSIGNED: "unsigned" >
  | < SHORT: "short" >
  | < INT: "int" >
  | < LONG: "long" >
  | < RETURN: "return" >
  | < PRINTF: "printf" >
  | < SCANF: "scanf" >
  | < WHILE: "while" >
  | < FOR: "for" >
  | < BREAK: "break" >
  | < CONTINUE: "continue" >
  | < IF: "if" >
  | < ELSE: "else" >
  | < OR: "||" >
  | < AND: "&&" >
  | < EQ: "==" >
  | < NEQ: "!=" >
  | < LT: "<" >
  | < LTE: "<=" >
  | < GT: ">" >
  | < GTE: ">=" >
  | < ASSIGN: "=" >
  | < PLUS_ASSIGN: "+=" >
  | < MINUS_ASSIGN: "-=" >
  | < MUL_ASSIGN: "*=" >
  | < DIV_ASSIGN: "/=" >
  | < MOD_ASSIGN: "%=" >
  | < COMMA: "," >
  | < LBRACKET: "[" >
  | < RBRACKET: "]" >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < DOT: "." >
  | < AMPERSAND: "&" >
  | < LITERAL: "\"" (~["\""])* "\"" >
  | < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* >
    {
        if (matchedToken.image.length() > 31) {
            throw new TokenMgrError("Erro: Nome de variável com mais de 31 caracteres: " + matchedToken.image, TokenMgrError.LEXICAL_ERROR);
        }
    }
}

TOKEN : {
    < CHAR_LITERAL: "'" (~["'"])+ "'" >
    {
        if (matchedToken.image.length() != 3) {
            throw new TokenMgrError("Erro semântico: literal de char inválido: " + matchedToken.image, TokenMgrError.LEXICAL_ERROR);
        }
    }
}

TOKEN : {
    < #ANY_CHAR: ["\u0000"-"\uFFFF"] >
}

TOKEN : {
    < INVALID: <ANY_CHAR> >
    {
        if (true)
            throw new TokenMgrError("Erro léxico: caractere inválido \"" + matchedToken.image + "\" encontrado.", TokenMgrError.LEXICAL_ERROR);
    }
}

// Cria o escopo global
void Start() : {} {
    { symbolTable.push(new HashMap<String, String>()); }
    Programa() <EOF>
}

void ListaID() : {} {
    <IDENTIFIER> DeclaracaoParam2() ListaIDTail()
}

void ListaIDTail() :{} {
    (
        <SEMICOLON>
    |   <COMMA> ListaID()
    )
}

void Programa() : {} {
    (
        Declaracao() Programa()
      | <DEFINE> <IDENTIFIER> <NUMBER> Programa()
      | {} // Produção vazia para permitir fim do programa
    )
}
void Programa2() : {} {
    (
        <SEMICOLON> Programa()
      | <LBRACKET> <NUMBER> <RBRACKET> <SEMICOLON> Programa()
      | <LPAREN> ListaParametros() <RPAREN> Bloco() Programa()
      | <COMMA> ListaID() Programa()
    )
}
// Na declaração, o tipo é obtido a partir de Tipo() e armazenado para verificação em atribuições
void Declaracao() : { Token id; String t = null; } {
    Especificador() t=Tipo() id=<IDENTIFIER>
    (
        // Definição de função
        <LPAREN>
            {
                if (lookupInGlobal(id.image) != null) {
                    throw new ParseException("Erro semântico: função " + id.image + " já declarada.");
                }
                symbolTable.firstElement().put(id.image, "func");
                symbolTable.push(new HashMap<String, String>());
            }
            ListaParametros() <RPAREN> Bloco()
            { symbolTable.pop(); }
      |
        // Declaração de variável
            {
                if (lookupInCurrentScope(id.image) != null) {
                    throw new ParseException("Erro semântico: variável " + id.image + " já declarada.");
                }
                symbolTable.peek().put(id.image, t);
                currentDeclaredType = t;
                currentDeclaredVar = id.image;
            }
            Declaracao2() <SEMICOLON>
    )
}


void Declaracao2() : {} {
    (
        <LBRACKET> <NUMBER> <RBRACKET> atribArray() // Array
      | // Atribuição simples ou composta
          {
              Token initToken = getToken(2);
              String exprType = computeExprType(initToken);
              if (!currentDeclaredType.equals(exprType)) {
                  throw new ParseException("Erro semântico: tipo incompatível na atribuição para a variável " 
                      + currentDeclaredVar + ". Esperado: " + currentDeclaredType + ", encontrado: " + exprType);
              }
          }
          OperadorAtrib() Expr()
      | {} // Declaração sem atribuição
    )
}

void Especificador() : {} {
    ( <AUTO> | <STATIC> | <EXTERN> | <CONST> )?
}

// Para arrays, não há verificação de tipo na inicialização neste exemplo
void atribArray() : {} {
    (
        OperadorAtrib() <LBRACE> listaNum() <RBRACE>
      | {}
    )
}

void listaNum() : {} {
    (
        <NUMBER> ( <COMMA> <NUMBER> )*
    )?
}

// A produção Tipo() agora retorna o tipo declarado
String Tipo() : { String type = ""; } {
    (
        <VOID>    { type = "void"; }
      | <CHAR>    { type = "char"; }
      | <FLOAT>   { type = "float"; }
      | <DOUBLE>  { type = "double"; }
      | <SIGNED>  Inteiro() { type = "int"; }
      | <UNSIGNED>Inteiro() { type = "int"; }
      | Inteiro()  { type = "int"; }
    )
    { return type; }
}

void Inteiro() : {} {
    ( <SHORT> | <INT> | <LONG> )
}

void ListaParametros() : {} {
    ( DeclaracaoParam() ( <COMMA> DeclaracaoParam() )* )?
}

void DeclaracaoParam() : { Token id; String t = null; } {
    Tipo() { t = /* tipo obtido de Tipo() */ ""; } id=<IDENTIFIER> DeclaracaoParam2()
    {
         if (lookupInCurrentScope(id.image) != null) {
             throw new ParseException("Erro semântico: parâmetro " + id.image + " já declarado.");
         }
         symbolTable.peek().put(id.image, t);
    }
}

void DeclaracaoParam2() : {} {
    ( <LBRACKET> <NUMBER> <RBRACKET> )?
}

void Bloco() : {} {
    { symbolTable.push(new HashMap<String, String>()); }
    <LBRACE> ( Instrucoes() )* <RBRACE>
    { symbolTable.pop(); }
}

void Instrucoes() : {} {
    (
        <IDENTIFIER> 
        {
            // Check if identifier exists
            if (lookup(token.image) == null) {
                throw new ParseException("Erro semântico: variável " + token.image + " não declarada.");
            }
        }
        (
            // Handle assignment statements
            OperadorAtrib() Expr() <SEMICOLON>
            |
            // Handle function calls
            <LPAREN> ExprLista() <RPAREN> <SEMICOLON>
        )
      | <RETURN> Expr() <SEMICOLON>
      | <PRINTF> <LPAREN> Expr() <RPAREN> <SEMICOLON>
      | <SCANF> <LPAREN> <IDENTIFIER> <RPAREN> <SEMICOLON>
      | <BREAK> 
        {
            if (dentroDeLoop == false) {
                throw new ParseException("Erro: 'break' só pode ser usado dentro de loops (while/for).");
            }
        }
        <SEMICOLON>
       | <CONTINUE> 
         {
            if (dentroDeLoop == false) {
                throw new ParseException("Erro: 'continue' só pode ser usado dentro de loops (while/for).");
            }
        }
        <SEMICOLON>
      | <IF> <LPAREN> Expr() <RPAREN> Instrucoes() ( <ELSE> Instrucoes() )?
      | <WHILE> 
        {
            if (dentroDeLoop == false) {
                dentroDeLoop = true;
            }
        }
        <LPAREN> Expr() <RPAREN> Instrucoes()
        {
            if (dentroDeLoop == true) {
                dentroDeLoop = false;
            }
        }
      | <FOR> 
       {
            if (dentroDeLoop == false) {
                dentroDeLoop = true;
            }
       }
        <LPAREN> Expr() <SEMICOLON> Expr() <SEMICOLON> Expr() <RPAREN> Instrucoes()
        {
            if (dentroDeLoop == true) {
                dentroDeLoop = false;
            }
        }
      | Bloco()
      | Declaracao()
    )
}

void Expressao() : {} {
    Atribuicao()
}

void Atribuicao() : {} {
    Expr() ( OperadorAtrib() Expr() )?
    {
        if ((token.kind == SimpleParserConstants.PLUS_ASSIGN ||
             token.kind == SimpleParserConstants.MINUS_ASSIGN ||
             token.kind == SimpleParserConstants.MUL_ASSIGN ||
             token.kind == SimpleParserConstants.DIV_ASSIGN ||
             token.kind == SimpleParserConstants.MOD_ASSIGN ||
             token.kind == SimpleParserConstants.ASSIGN) &&
            getToken(1).kind == SimpleParserConstants.SEMICOLON) {
            throw new ParseException("Erro: expressão esperada após o operador de atribuição.");
        }
    }
}

void OperadorAtrib() : {} {
    ( <ASSIGN> | <MUL_ASSIGN> | <DIV_ASSIGN> | <MOD_ASSIGN> | <PLUS_ASSIGN> | <MINUS_ASSIGN> )
}

// As produções abaixo de expressão não foram alteradas para propagação de tipos para manter a simplicidade
void Expr() : {} {
    ExprOr()
}

void ExprOr() : {} {
    ExprAnd() ( <OR> ExprAnd() )*
}

void ExprAnd() : {} {
    ExprEqual() ( <AND> ExprEqual() )*
}

void ExprEqual() : {} {
    ExprRelacional() ( ( <EQ> | <NEQ> ) ExprRelacional() )*
}

void ExprRelacional() : {} {
    ExprAditiva() ( ( <LT> | <LTE> | <GT> | <GTE> ) ExprAditiva() )*
}

void ExprAditiva() : {} {
    ExprMultiplicativa() ( ( <ADD> | <SUB> ) ExprMultiplicativa() )*
}

void ExprMultiplicativa() : {} {
    ExprUnaria() ( ( <MUL> | <DIV> | <MOD> ) ExprUnaria() )*
}

void ExprUnaria() : {} {
    ( <ADD> | <SUB> )? ExprPrimaria()
}

void ExprPrimaria() : {} {
    (
      <IDENTIFIER>
      {
         if (lookup(token.image) == null) {
             throw new ParseException("Erro semântico: variável ou função " + token.image + " não declarada.");
         }
      }
      (
         LOOKAHEAD( <LPAREN> )
           <LPAREN> ExprLista() <RPAREN>
       |  LOOKAHEAD( <LBRACKET> )
           <LBRACKET> Expr() <RBRACKET>
       |  { /* não há chamada nem acesso a array */ }
      )
    | <NUMBER>
    | <CHAR_LITERAL>
    | <LITERAL>
    | <LPAREN> Expr() <RPAREN>
    )
}


void ExprLista() : {} {
    ( Expr() ( <COMMA> Expr() )* )?
}
