options {
    LOOKAHEAD = 2;
    UNICODE_INPUT = false; // Garante que apenas caracteres ASCII sejam aceitos
}

PARSER_BEGIN(SimpleParser)

package javacc;

import java.io.InputStream;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.ModelToken;

public class SimpleParser {
    
    public void analisar() throws ParseException {
        this.Start();
    }

    private static final Map<Integer, String> tokenNameMap = createTokenNameMap();

    private static Map<Integer, String> createTokenNameMap() {
        Map<Integer, String> map = new HashMap<>();
        Field[] fields = SimpleParserConstants.class.getDeclaredFields();
        for (Field field : fields) {
            if (field.getType() == int.class) {
                int value = 0;
                try {
                    value = field.getInt(null); 
                } catch (IllegalArgumentException | IllegalAccessException ex) {
                    Logger.getLogger(SimpleParser.class.getName()).log(Level.SEVERE, null, ex);
                }
                map.put(value, field.getName());
            }
        }
        return map;
    }

    public ArrayList<ModelToken> getTokens(InputStream codigo) throws ParseException {
        var tokens = new ArrayList<ModelToken>();
        this.ReInit(codigo); 
        while (true) {
            Token token = this.getNextToken();

            if (token.kind == SimpleParserConstants.EOF) break;

            String tokenNome = tokenNameMap.get(token.kind);
            if (tokenNome == null) {
                tokenNome = SimpleParserConstants.tokenImage[token.kind];
            } else {
                tokenNome = "<" + tokenNome + ">";
            }
            tokens.add(new ModelToken(tokenNome, token.image));
        }
        return tokens;
    }
}

PARSER_END(SimpleParser)

SKIP : {
    " " | "\t" | "\n" | "\r"
}

SKIP : {
    <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ( "\n" | "\r" | "\r\n" )>
}

SKIP : {
    <MULTI_LINE_COMMENT: "/*" ( ~["*"] )* ( "*" ( ~["/"] )* )* "/">
}

TOKEN : {
    < DEFINE: "#define" >
  | < NUMBER: (<DIGIT>)+ ("." (<DIGIT>)+)? >
  | < #LETTER: ["a"-"z", "A"-"Z", "_"] >
  | < #DIGIT: ["0"-"9"] >
  | < ADD: "+" >
  | < SUB: "-" >
  | < MUL: "*" >
  | < DIV: "/" >
  | < MOD: "%" >
  | < LPAREN: "(" >
  | < RPAREN: ")" >
  | < SEMICOLON: ";" >
  | < AUTO: "auto" >
  | < STATIC: "static" >
  | < EXTERN: "extern" >
  | < CONST: "const" >
  | < VOID: "void" >
  | < CHAR: "char" >
  | < FLOAT: "float" >
  | < DOUBLE: "double" >
  | < SIGNED: "signed" >
  | < UNSIGNED: "unsigned" >
  | < SHORT: "short" >
  | < INT: "int" >
  | < LONG: "long" >
  | < RETURN: "return" >
  | < PRINTF: "printf" >
  | < SCANF: "scanf" >
  | < WHILE: "while" >
  | < FOR: "for" >
  | < BREAK: "break" >
  | < IF: "if" >
  | < ELSE: "else" >
  | < OR: "||" >
  | < AND: "&&" >
  | < EQ: "==" >
  | < NEQ: "!=" >
  | < LT: "<" >
  | < LTE: "<=" >
  | < GT: ">" >
  | < GTE: ">=" >
  | < ASSIGN: "=" >
  | < PLUS_ASSIGN: "+=" >
  | < MINUS_ASSIGN: "-=" >
  | < MUL_ASSIGN: "*=" >
  | < DIV_ASSIGN: "/=" >
  | < MOD_ASSIGN: "%=" >
  | < COMMA: "," >
  | < LBRACKET: "[" >
  | < RBRACKET: "]" >
  | < LBRACE: "{" >
  | < RBRACE: "}" >
  | < DOT: "." >
  | < AMPERSAND: "&" >
  | < LITERAL: "\"" (~["\""])* "\"" >
  | < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* >
    {
        if (matchedToken.image.length() > 31) {
            throw new TokenMgrError("Erro: Nome de variável com mais de 31 caracteres: " + matchedToken.image, TokenMgrError.LEXICAL_ERROR);
        }
    }
}

TOKEN : {
    < #ANY_CHAR: ["\u0000"-"\uFFFF"] >
}

TOKEN : {
    < INVALID: <ANY_CHAR> >
    {
        throw new TokenMgrError("Erro léxico: caractere inválido \"" + matchedToken.image + "\" encontrado.", TokenMgrError.LEXICAL_ERROR);
    }
}

void Start() : {} {
    Programa() <EOF>
}

void Programa() : {} {
    (
        Declaracao() Programa()
      | <DEFINE> <IDENTIFIER> <NUMBER> Programa()
      | {} // Produção vazia para permitir fim do programa
    )
}

void Declaracao() : {} {
    Especificador() Tipo() <IDENTIFIER> (
        <LPAREN> ListaParametros() <RPAREN> Bloco()  // Definição de função, sem ponto e vírgula
      | Declaracao2() <SEMICOLON>                   // Declaração de variável ou atribuição, com ponto e vírgula
    )
}

void Declaracao2() : {} {
    (
        <LBRACKET> <NUMBER> <RBRACKET> atribArray() // Array
      | <LPAREN> ListaParametros() <RPAREN> Bloco() // Função
      | OperadorAtrib() Expr() // Atribuições simples e compostas
      | {} // Produção vazia para declaração simples
    )
}

void Especificador() : {} {
    ( <AUTO> | <STATIC> | <EXTERN> | <CONST> )?
}

void atribArray() : {} {
    (   OperadorAtrib() <LBRACE> <NUMBER> <RBRACE>
        | {}
    )
}

/*void listaNum() : {} {
    (

    )
}*/

void Tipo() : {} {
    (
        <VOID> | <CHAR> | <FLOAT> | <DOUBLE>
      | <SIGNED> Inteiro()
      | <UNSIGNED> Inteiro()
      | Inteiro()
    )
}

void Inteiro() : {} {
    ( <SHORT> | <INT> | <LONG> )
}

void ListaParametros() : {} {
    ( DeclaracaoParam() ( <COMMA> DeclaracaoParam() )* )?
}

void DeclaracaoParam() : {} {
    Tipo() <IDENTIFIER> DeclaracaoParam2()
}

void DeclaracaoParam2() : {} {
    ( <LBRACKET> <NUMBER> <RBRACKET> )?
}

void Bloco() : {} {
    <LBRACE> ( Instrucoes() )* <RBRACE>
}

void Instrucoes() : {} {
    (
        <IDENTIFIER> Expressao() <SEMICOLON>
      | <RETURN> Expr() <SEMICOLON>
      | <PRINTF> <LPAREN> Expr() <RPAREN> <SEMICOLON>
      | <SCANF> <LPAREN> <IDENTIFIER> <RPAREN> <SEMICOLON>
      | <BREAK> <SEMICOLON>
      | <IF> <LPAREN> Expr() <RPAREN> Instrucoes() ( <ELSE> Instrucoes() )?
      | <WHILE> <LPAREN> Expr() <RPAREN> Instrucoes()
      | <FOR> <LPAREN> Expr() <SEMICOLON> Expr() <SEMICOLON> Expr() <RPAREN> Instrucoes()
      | Bloco()
      | Declaracao()
    )
}

void Expressao() : {} {
    Atribuicao()
}

void Atribuicao() : {} {
    Expr() ( OperadorAtrib() Expr() )?
    {
        if ((token.kind == SimpleParserConstants.PLUS_ASSIGN ||
             token.kind == SimpleParserConstants.MINUS_ASSIGN ||
             token.kind == SimpleParserConstants.MUL_ASSIGN ||
             token.kind == SimpleParserConstants.DIV_ASSIGN ||
             token.kind == SimpleParserConstants.MOD_ASSIGN ||
             token.kind == SimpleParserConstants.ASSIGN) &&
            getToken(1).kind == SimpleParserConstants.SEMICOLON) {
            throw new ParseException("Erro: expressão esperada após o operador de atribuição.");
        }
    }
}

void OperadorAtrib() : {} {
    ( <ASSIGN> | <MUL_ASSIGN> | <DIV_ASSIGN> | <MOD_ASSIGN> | <PLUS_ASSIGN> | <MINUS_ASSIGN> )
}

void Expr() : {} {
    ExprOr()
}

void ExprOr() : {} {
    ExprAnd() ( <OR> ExprAnd() )*
}

void ExprAnd() : {} {
    ExprEqual() ( <AND> ExprEqual() )*
}

void ExprEqual() : {} {
    ExprRelacional() ( ( <EQ> | <NEQ> ) ExprRelacional() )*
}

void ExprRelacional() : {} {
    ExprAditiva() ( ( <LT> | <LTE> | <GT> | <GTE> ) ExprAditiva() )*
}

void ExprAditiva() : {} {
    ExprMultiplicativa() ( ( <ADD> | <SUB> ) ExprMultiplicativa() )*
}

void ExprMultiplicativa() : {} {
    ExprUnaria() ( ( <MUL> | <DIV> | <MOD> ) ExprUnaria() )*
}

void ExprUnaria() : {} {
    ( <ADD> | <SUB> )? ExprPrimaria()
}

void ExprPrimaria() : {} {
    (
        <IDENTIFIER> ( <LBRACKET> Expr() <RBRACKET> | <LPAREN> ExprLista() <RPAREN> )?
      | <NUMBER>
      | <LITERAL>
      | <LPAREN> Expr() <RPAREN>
    )
}

void ExprLista() : {} {
    ( Expr() ( <COMMA> Expr() )* )? // Torna opcional a presença de argumentos
}