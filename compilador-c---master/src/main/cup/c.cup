package cup;

import java_cup.runtime.*;
import java.util.*;

parser code {:
  private List<String> erros = new ArrayList();

  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Erro");

    if (info instanceof java_cup.runtime.Symbol) {
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

      if (s.left >= 0) {

        m.append(" na linha "+(s.left+1));

        if (s.right >= 0)

          m.append(", coluna "+(s.right+1));
        }
    }

    List<Integer> ids = this.expected_token_ids();
    LinkedList<String> list = new LinkedList();
    Iterator var3 = ids.iterator();

    while(var3.hasNext()) {
        Integer expected = (Integer)var3.next();
        list.add(converteSimboloParaLexema(this.symbl_name_from_id(expected)));
    }

    m.append(" : " + "Erro de sintaxe! " + "Era esperado encontrar " + list);

    erros.add(m.toString());
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
  }

  public List<String> getErros() {
    return erros;
  }

  private String converteSimboloParaLexema(String simbolo) {
      switch(simbolo) {
          case "AUTO":
              return "auto";
          case "BREAK":
              return "break";
          case "CHAR":
              return "char";
          case "CONST":
              return "const";
          case "DOUBLE":
              return "double";
          case "ELSE":
              return "else";
          case "ENUM":
              return "enum";
          case "EXTERN":
              return "extern";
          case "FLOAT":
              return "float";
          case "FOR":
              return "for";
          case "IF":
              return "if";
          case "INT":
              return "int";
          case "LONG":
              return "long";
          case "PRINTF":
              return "printf";
          case "RETURN":
              return "return";
          case "SCANF":
              return "scanf";
          case "SHORT":
              return "short";
          case "SIGNED":
              return "signed";
          case "STATIC":
              return "static";
          case "STRUCT":
              return "struct";
          case "UNSIGNED":
              return "unsigned";
          case "VOID":
              return "void";
          case "WHILE":
              return "while";
          case "DEFINE":
              return "define";
          case "INCLUDE":
              return "include";
          case "MAIOR":
              return ">";
          case "MENOR":
              return "<";
          case "IGUALIGUAL":
              return "==";
          case "MENORIGUAL":
              return "<=";
          case "IGUAL":
              return "=";
          case "MAIORIGUAL":
              return ">=";
          case "DIFERENTE":
              return "!=";
          case "AND":
              return "&&";
          case "OR":
              return "||";
          case "MAIS":
              return "+";
          case "MENOS":
              return "-";
          case "MULTIPLICADOR":
              return "*";
          case "DIVISOR":
              return "/";
          case "MAISIGUAL":
              return ">=";
          case "MENOSIGUAL":
              return "<=";
          case "MULTIPLICADORIGUAL":
              return "*=";
          case "DIVISORIGUAL":
              return "/=";
          case "MODIGUAL":
              return "%=";
          case "PARENTESE_E":
              return "(";
          case "PARENTESE_D":
              return ")";
          case "CHAVE_E":
              return "{";
          case "CHAVE_D":
              return "}";
          case "COLCHETE_E":
              return "[";
          case "COLCHETE_D":
              return "]";
          case "PONTOVIRGULA":
              return ";";
          case "VIRGULA":
              return ",";
          case "PONTO":
              return ".";
          case "ASPA_SIMPLES":
              return "'";
          case "ASPA_DUPLA":
              return "\"";
          case "ID":
              return "variavel";
          case "NUM":
              return "nÃºmero";
          case "CRLF":
              return "quebra de linha";
          case "EOF":
              return "fim do arquivo";
          default:
              return simbolo;
      }
  }
:};


terminal MAIS, MENOS, MULTIPLICADOR, DIVISOR;
terminal AND, OR;
terminal IGUALIGUAL, DIFERENTE, MENOR, MAIOR, MAIORIGUAL, MENORIGUAL;
terminal IGUAL, MULTIPLICADORIGUAL, DIVISORIGUAL, MODIGUAL, MAISIGUAL, MENOSIGUAL; /* atribuicao */
terminal PONTOVIRGULA, VIRGULA;
terminal ASPA_SIMPLES, ASPA_DUPLA, PONTO;

terminal AUTO, STATIC, EXTERN, CONST; /* especificadores */
terminal VOID, CHAR, FLOAT, DOUBLE, SIGNED, UNSIGNED, SHORT, INT, LONG, ENUM, STRUCT; /* tipos */
terminal IF, ELSE;
terminal FOR, WHILE, BREAK;
terminal RETURN;
terminal PRINTF, SCANF;
terminal PARENTESE_E, PARENTESE_D, COLCHETE_E, COLCHETE_D, CHAVE_E, CHAVE_D;

terminal INCLUDE;
terminal DEFINE;

terminal CRLF;

terminal ID;
terminal NUM;
terminal LITERAL;


non terminal     programa;
non terminal 	 declaracaoVariavel;
non terminal     tipo;
non terminal 	 declaracaoFuncao;
non terminal     parametros;
non terminal 	 listaParametros;
non terminal     declaracaoParametro;
non terminal 	 bloco;
non terminal     listaDeclaracao;
non terminal 	 listaInstrucao;
non terminal     instrucao;
non terminal     expr;
non terminal 	 Object	 primario;
non terminal     chamadaFuncao;
non terminal     listaParametroChamadaFuncao;
non terminal 	 posicaoVariavel;
non terminal 	 id;
non terminal     especificador;
non terminal     inteiro;
non terminal     operadorAtribuicao;
non terminal     defines;
non terminal     especificadortipo;
non terminal     forInicializacao;
non terminal     forAtualizacao;
non terminal     includes;
non terminal     listaId;
non terminal     declaracaoStruct;
non terminal     declaracaoEnum;
non terminal     listaIdDeclaracaoEnum;

precedence left MULTIPLICADOR, DIVISOR;
precedence left MAIS,MENOS;
precedence left MENOR,MENORIGUAL,MAIOR,MAIORIGUAL,IGUALIGUAL,DIFERENTE;
precedence left AND;
precedence left OR;

start with includes;

includes ::= INCLUDE LITERAL includes
            | defines
            ;

defines ::= DEFINE ID NUM defines
        | programa
        ;

programa ::= programa declaracaoVariavel
		| programa declaracaoFuncao
		| programa declaracaoStruct
		| programa declaracaoEnum
		|
		;

declaracaoStruct ::= STRUCT id CHAVE_E listaDeclaracao CHAVE_D PONTOVIRGULA;

declaracaoEnum ::= ENUM id CHAVE_E listaIdDeclaracaoEnum CHAVE_D PONTOVIRGULA;

listaIdDeclaracaoEnum ::= id
                    | id IGUAL INT
                    | id VIRGULA listaIdDeclaracaoEnum
                    | id IGUAL INT VIRGULA listaIdDeclaracaoEnum
                    ;

declaracaoVariavel ::= especificadortipo listaId PONTOVIRGULA
		| especificadortipo listaId operadorAtribuicao expr PONTOVIRGULA
		| especificadortipo id COLCHETE_E NUM COLCHETE_D PONTOVIRGULA
		| STRUCT id id PONTOVIRGULA
		| ENUM id id PONTOVIRGULA
		;

listaId ::= id
        | id VIRGULA listaId
        ;

especificador ::= AUTO
                | STATIC
                | EXTERN
                | CONST
                ;

tipo ::=  VOID
		| CHAR
		| FLOAT
		| DOUBLE
		| SIGNED inteiro
		| UNSIGNED inteiro
		| inteiro
		;

inteiro ::= SHORT
        | INT
        | LONG
        ;

especificadortipo::= especificador tipo
    | tipo
    ;

operadorAtribuicao ::= IGUAL
                    | MULTIPLICADORIGUAL
                    | DIVISORIGUAL
                    | MODIGUAL
                    | MAISIGUAL
                    | MENOSIGUAL
                    ;

declaracaoFuncao ::= especificadortipo id parametros bloco
		            ;

parametros ::= PARENTESE_E PARENTESE_D
			| PARENTESE_E listaParametros PARENTESE_D
			;

listaParametros ::= declaracaoParametro
			| listaParametros VIRGULA declaracaoParametro
			;

declaracaoParametro ::= tipo id
			;

bloco ::= CHAVE_E listaDeclaracao listaInstrucao CHAVE_D
		;

listaDeclaracao ::= listaDeclaracao declaracaoVariavel
		        |
		        ;

listaInstrucao ::= listaInstrucao instrucao
		        |
		        ;

instrucao ::= SCANF PARENTESE_E id PARENTESE_D PONTOVIRGULA
            | PRINTF PARENTESE_E expr PARENTESE_D PONTOVIRGULA
            | posicaoVariavel operadorAtribuicao expr PONTOVIRGULA
            | id PONTOVIRGULA
            | id operadorAtribuicao expr PONTOVIRGULA
            | IF PARENTESE_E expr PARENTESE_D bloco
            | IF PARENTESE_E expr PARENTESE_D bloco ELSE bloco
            | FOR PARENTESE_E forInicializacao PONTOVIRGULA expr PONTOVIRGULA forAtualizacao PARENTESE_D bloco
            | WHILE PARENTESE_E expr PARENTESE_D bloco
            | BREAK PONTOVIRGULA
            | RETURN expr PONTOVIRGULA
            | RETURN PONTOVIRGULA
            | chamadaFuncao PONTOVIRGULA
            ;

forInicializacao ::= tipo id operadorAtribuicao expr
                    |
                    ;

forAtualizacao ::= id operadorAtribuicao expr
                |
                ;

expr ::= expr MAIS expr
	| expr MENOS expr
	| expr MULTIPLICADOR expr
	| expr DIVISOR expr
	| expr AND expr
	| expr OR expr
	| expr IGUALIGUAL expr
	| expr DIFERENTE expr
	| expr MENOR expr
	| expr MAIOR expr
	| expr MENORIGUAL expr
	| expr MAIORIGUAL expr
    | MAIS primario
	| MENOS primario
	| primario
	;

primario ::= NUM
        | LITERAL
        | PARENTESE_E expr PARENTESE_D
        | chamadaFuncao
        | posicaoVariavel
        | id
        ;

chamadaFuncao ::= id PARENTESE_E PARENTESE_D
			| id PARENTESE_E listaParametroChamadaFuncao PARENTESE_D
			;

listaParametroChamadaFuncao ::= expr
			| listaParametroChamadaFuncao VIRGULA expr
			;

posicaoVariavel ::= id COLCHETE_E expr COLCHETE_D
				;

id ::= ID
	;
